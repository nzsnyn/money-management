// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for multi-user support (NextAuth.js compatible)
model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String    @unique
  emailVerified            DateTime?
  image                    String?
  password                 String? // For credentials provider
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  bankAccounts BankAccount[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  goals        Goal[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

// Bank Account model (bank accounts, wallets, etc.)
model BankAccount {
  id          String      @id @default(cuid())
  name        String
  type        AccountType
  balance     Decimal     @default(0) @db.Decimal(12, 2)
  currency    String      @default("IDR")
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  transactions Transaction[]

  @@map("bank_accounts")
}

// Category model for transaction categorization
model Category {
  id        String       @id @default(cuid())
  name      String
  icon      String?
  color     String?
  type      CategoryType
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name])
  @@map("categories")
}

// Transaction model - the core of money management
model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  description String?
  notes       String?
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Foreign keys
  userId     String
  accountId  String
  categoryId String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// Budget model for expense planning
model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Decimal  @db.Decimal(12, 2)
  spent     Decimal  @default(0) @db.Decimal(12, 2)
  period    Period
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId     String
  categoryId String?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

// Goal model for savings goals
model Goal {
  id            String    @id @default(cuid())
  name          String
  description   String?
  targetAmount  Decimal   @db.Decimal(12, 2)
  currentAmount Decimal   @default(0) @db.Decimal(12, 2)
  targetDate    DateTime?
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Enums
enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
  LOAN
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Period {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
